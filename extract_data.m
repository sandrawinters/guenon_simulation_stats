%

%% setup
d = cd; %SHOULD CONTAIN A FOLDER CALLED 'simulation_results' THAT CONTAINS FOLDERS OF RESULTS GENERATED BY guenonEvSim

sims = dir(fullfile(d,'simulation_results/*'));
sims = {sims.name}';
sims = sims(ismember(sims,{'.','..'})==0);

ngen = 20000;
genGap = 100;
genPts = 0:genGap:ngen;
nitt = 28;

verbose = 0; %set to 1 to display progress

%% restructure files
disp('Restructuring results files...')
for i = 1:length(sims)
    for itt = 1:nitt
        if exist(fullfile(d,'simulation_results',sims{i},['iteration' num2str(itt,'%02.0f') '_generations.tar']),'file')==0
            movefile(fullfile(d,'simulation_results',sims{i},['iteration' num2str(itt)],'generations.tar'), ...
                     fullfile(d,'simulation_results',sims{i},['iteration' num2str(itt,'%02.0f') '_generations.tar']))
        end
        if exist(fullfile(d,'simulation_results',sims{i},['iteration' num2str(itt,'%02.0f') '_simulation_data.mat']),'file')==0
            movefile(fullfile(d,'simulation_results',sims{i},['iteration' num2str(itt)],'simulation_data.mat'), ...
                     fullfile(d,'simulation_results',sims{i},['iteration' num2str(itt,'%02.0f') '_simulation_data.mat']));
        end
        if exist(fullfile(d,'simulation_results',sims{i},['iteration' num2str(itt)]),'dir') && numel(dir(fullfile(d,sims{i},['iteration' num2str(itt)])))<=2
            rmdir(fullfile(d,'simulation_results',sims{i},['iteration' num2str(itt)]));
        end
    end
end
disp('done')

%% extract population comparisons
%generates summary files with average population faces & face distances

disp('Generating face evolution and distance data files...')

if isfolder(fullfile(d,'simulation_data'))==0
    mkdir(fullfile(d,'simulation_data'))
end

datFaceAll = [];
datDistAll = [];

for i = 1:length(sims)
    simName = sims{i};

    if verbose==1
        disp(['GENERATING DATA FILES: ' char(simName)]) %display progress
    end

    tmp = strsplit(simName,'_');
    npop = str2double(strrep(tmp{length(tmp)},'populations',''));

    datFace = [];
    datDist = [];

    for itt = 1:nitt
        load(fullfile(d,'simulation_results',simName,['iteration' num2str(itt,'%02.0f') '_simulation_data.mat']))

        datFace = cat(1,datFace,[repmat(itt,size(faceEvGen')) faceEvGen' faceEvPop' faceEvMean' faceEvSD']);

        tmp = [[ones(size(meanDistCon,2),1) ones(size(meanDistCon,2),1) meanDistCon']; ... %1 = mean; 1 = conspecific
               [ones(size(meanDistCon,2),1) ones(size(meanDistCon,2),1)*2 meanDistHetero']; ... %1 = mean; 2 = heterospecific
               [ones(size(meanDistCon,2),1)*2 ones(size(meanDistCon,2),1) sdDistCon']; ... %2 = sd; 1 = conspecific
               [ones(size(meanDistCon,2),1)*2 ones(size(meanDistCon,2),1)*2 sdDistHetero']]; %2 = sd; 1 = heterospecific
        tmp = [repmat(itt,[npop*4 1]), ...
               repmat((1:npop)',[4 1]), ...
               tmp]; %#ok<AGROW> 
        datDist = cat(1,datDist,tmp);

        clear faceEvGen faceEvPop faceEvMean faceEvSD meanDistCon meanDistHetero sdDistCon sdDisthetero %for safety
    end

    datFace = array2table(datFace, ...
                          'VariableNames',cat(2,{'itt','gen','pop'},strrep(strcat({'faceMean'},num2str((1:15)'))',' ',''),{'biasMean','qualityMean'},strrep(strcat({'faceSD'},num2str((1:15)'))',' ',''),{'biasSD','qualitySD'})); % <-- yikes...
	writetable(datFace,fullfile(d,'simulation_data',[simName '_face_data.csv']))
    datFaceAll = cat(1,datFaceAll,[array2table(repmat({simName},[size(datFace,1) 1]),'VariableNames',{'sim'}),datFace]);

	datDist = array2table(datDist, ...
                          'VariableNames',cat(2,{'itt','pop','stat','spp'},strrep(strcat({'gen'},num2str((genPts)'))',' ','')));
    writetable(datDist,fullfile(d,'simulation_data',[simName '_distance_data.csv']))
    datDistAll = cat(1,datDistAll,[array2table(repmat({simName},[size(datDist,1) 1]),'VariableNames',{'sim'}),datDist]);
end
clear i itt line dat simName tmp %for safety

save(fullfile(d,'datFaceAll.mat'),'datFaceAll','-v7.3')
save(fullfile(d,'datDistAll.mat'),'datDistAll','-v7.3')

writetable(datFaceAll,fullfile(d,'data_face_evolution.csv'))
writetable(datDistAll,fullfile(d,'data_distance.csv'))
    %note: stat 1 = mean, 2 = sd; spp 1 = conspp, 2 = heterospp

disp('done')

%% create face images
%reconstructs average population faces from face space scores

%image montages have populations in rows; 1st column is initial faces, 2nd
%column is faces after transition to sympatry, 3rd column is faces at end
%of simulations

disp('Generating face images...')

load 'extant_features.mat'

faceD = fullfile(d,'faces');
if exist(faceD,'dir')==0
    mkdir(faceD);
end
if exist(fullfile(faceD,'population_mean_faces'),'dir')==0
    mkdir(fullfile(faceD,'population_mean_faces'));
end

if exist('datFaceAll','var')==0
    load(fullfile(d,'datFaceAll.mat'))
end

dat = datFaceAll(ismember(datFaceAll.gen,[0 2000 10000 20000]),:); %remove extraneous generations (to speed things up)

dat = mergevars(dat,contains(dat.Properties.VariableNames,'faceMean'),'NewVariableName','faceMean');
dat = mergevars(dat,contains(dat.Properties.VariableNames,'faceSD'),'NewVariableName','faceSD');

sims = unique(dat.sim);
for i = 1:length(sims)
    simName = sims{i};

    if verbose==1
        disp(['GENERATING IMAGES: ' char(simName)]) %display progress
    end

    if exist(fullfile(faceD,'population_mean_faces',simName),'dir')==0
        mkdir(fullfile(faceD,'population_mean_faces',simName));
    end

    tmp = strsplit(simName,'_');
    nAllo = str2double(strrep(tmp{end-3},'pAllo',''))/100*ngen;
    npop = str2double(strrep(tmp{length(tmp)},'populations',''));

    for itt = 1:nitt
        faceEvo = [];
        for gen = unique([0 nAllo ngen])
            compFaces = [];
            for p = 1:npop
                meanFeat = dat.faceMean(strcmp(dat.sim,simName) & dat.itt==itt & dat.gen==gen & dat.pop==p,:);

                imMean = reconstructFace(meanFeat,meanFace,eigenfaces,dims);
                imwrite(imMean,fullfile(faceD,'population_mean_faces',simName,['itt' num2str(itt,'%02.0f') '_gen' num2str(gen,'%05.0f') '_pop' num2str(p) '_mean.tiff']));

                popFaces = cat(2,imMean);
                compFaces = cat(1,compFaces,popFaces);
            end

            compFaces = padarray(compFaces,[10 10]);
            faceEvo = cat(2,faceEvo,compFaces);
        end
        imwrite(faceEvo,fullfile(faceD,[simName,'_itt' num2str(itt,'%02.0f') '.tiff']));
    end
end

disp('done')

